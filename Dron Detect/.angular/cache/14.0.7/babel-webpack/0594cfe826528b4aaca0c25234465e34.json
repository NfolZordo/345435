{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst _c0 = [\"myCanvas\"];\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    // public context: CanvasRenderingContext2D;\n    ngAfterViewInit() {\n      let canvas = this.myCanvas.nativeElement;\n      let context = this.myCanvas.nativeElement.getContext('2d');\n      canvas.width = 1000;\n      canvas.height = 800;\n      let mouse = {\n        x: 0,\n        y: 0\n      };\n      let draw = false;\n      let radar1 = {\n        x: 100,\n        y: 80\n      };\n      let radar2 = {\n        x: 650,\n        y: 80\n      };\n      let radar3 = {\n        x: 100,\n        y: 650\n      };\n      let radar4 = {\n        x: 650,\n        y: 650\n      };\n\n      for (let x = 0.5; x < canvas.width; x += 10) {\n        context.moveTo(x, 0);\n        context.lineTo(x, canvas.height);\n      }\n\n      for (let y = 0.5; y < canvas.height; y += 10) {\n        context.moveTo(0, y);\n        context.lineTo(canvas.width, y);\n      }\n\n      context.stroke();\n      context.beginPath();\n      context.arc(radar1.x, radar1.y, 6, 0, Math.PI * 2);\n      context.fillStyle = \"green\";\n      context.fill();\n      context.closePath();\n      context.stroke();\n      context.stroke();\n      context.beginPath();\n      context.arc(radar2.x, radar2.y, 6, 0, Math.PI * 2);\n      context.fillStyle = \"green\";\n      context.fill();\n      context.closePath();\n      context.stroke();\n      context.stroke();\n      context.beginPath();\n      context.arc(radar3.x, radar3.y, 6, 0, Math.PI * 2);\n      context.fillStyle = \"green\";\n      context.fill();\n      context.closePath();\n      context.stroke();\n      context.stroke();\n      context.beginPath();\n      context.arc(radar4.x, radar4.y, 6, 0, Math.PI * 2);\n      context.fillStyle = \"green\";\n      context.fill();\n      context.closePath();\n      context.stroke();\n      canvas.addEventListener(\"mouseup\", function (e) {\n        mouse.x = e.pageX - this.offsetLeft;\n        mouse.y = e.pageY - this.offsetTop;\n        context.beginPath();\n        let dron = context.arc(mouse.x, mouse.y, 4, 0, Math.PI * 2, false);\n        context.fillStyle = \"red\";\n        context.fill(); // context.lineTo(mouse.x, mouse.y);\n\n        context.stroke();\n        context.closePath();\n        draw = false; // console.log(\"Радар 1 = \" + calculateDistance(radar1,radar2,mouse));\n        // console.log(\"Радар 2 = \" + calculateDistance(radar2,radar4,mouse));\n        // console.log(\"Радар 3 = \" + calculateDistance(radar3,radar1,mouse));\n\n        console.log(\"Радар 4 = \" + calculateDistance(radar4, radar3, mouse)); // console.log(\"aзимут = \" + calculateAngle(mouse,radar4));\n      });\n\n      function calculateAngle(dronСoordinates, radarСoordinates) {\n        let azimuth;\n        let angle;\n        angle = Math.atan((dronСoordinates.y - radarСoordinates.y) / (dronСoordinates.x - radarСoordinates.x)) * 180 / Math.PI; // console.log(\"кут = \" + angle);\n\n        if (dronСoordinates.x >= radarСoordinates.x) {\n          azimuth = 90 + angle;\n        } else {\n          azimuth = 270 + angle;\n        }\n\n        return azimuth;\n      }\n\n      function calculateTriangleAngle(radarСoordinates1, radarСoordinates2, dronСoordinates) {\n        let angle;\n        let side1 = (radarСoordinates2.y - radarСoordinates1.y) / (radarСoordinates2.x - radarСoordinates1.x);\n        let side2 = (dronСoordinates.y - radarСoordinates1.y) / (dronСoordinates.x - radarСoordinates1.x);\n        let side3 = (dronСoordinates.y - radarСoordinates2.y) / (dronСoordinates.x - radarСoordinates2.x);\n        angle = Math.acos();\n      }\n\n      function calculateDistance(radarСoordinates1, radarСoordinates2, dronСoordinates) {\n        let distance;\n        let angleRadar1 = calculateSmaleAngle(calculateAngle(dronСoordinates, radarСoordinates1));\n        let angleRadar2 = calculateSmaleAngle(calculateAngle(dronСoordinates, radarСoordinates2));\n        let angleThird = 180 - angleRadar1 - angleRadar2;\n        let distanceBetweenRadars = Math.sqrt(Math.pow(radarСoordinates1.x - radarСoordinates2.x, 2) + Math.pow(radarСoordinates1.y - radarСoordinates2.y, 2));\n        console.log(\"distanceBetweenRadars = \" + distanceBetweenRadars);\n        console.log(\"angleRadar1 = \" + angleRadar1);\n        console.log(\"angleRadar2 = \" + angleRadar2);\n        console.log(\"angleThird = \" + angleThird);\n        distance = distanceBetweenRadars * Math.sin(angleRadar1) / Math.sin(angleThird);\n        return Math.abs(distance);\n      }\n\n      function calculateSmaleAngle(angle) {\n        if (angle >= 0 && angle <= 90) return angle;\n        if (angle > 90 && angle <= 180) return angle - 90;\n        if (angle > 180 && angle <= 270) return angle - 180;\n        if (angle > 270 && angle < 360) return angle - 270;\n      }\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"my-appqq\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.myCanvas = _t.first);\n      }\n    },\n    decls: 2,\n    vars: 0,\n    consts: [[\"myCanvas\", \"\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"canvas\", null, 0);\n      }\n    },\n    encapsulation: 2\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}